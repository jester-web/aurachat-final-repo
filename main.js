const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const { fork } = require('child_process'); // ðŸ’¡ YENÄ°: Node.js sunucusunu baÅŸlatmak iÃ§in

// UygulamanÄ±n canlÄ± yeniden yÃ¼klemesini geliÅŸtirme ortamÄ±nda etkinleÅŸtirir.
// Bu satÄ±rÄ± production'a geÃ§erken kaldÄ±rabilir veya yorum satÄ±rÄ± yapabilirsiniz.
try {
    require('electron-reloader')(module);
} catch (_) {}

// ðŸ’¡ YENÄ°: Sunucu iÅŸlemini tutmak iÃ§in bir deÄŸiÅŸken
let serverProcess;

let mainWindow;
let splashWindow;

function createSplashWindow() {
    splashWindow = new BrowserWindow({
        width: 400,
        height: 300,
        transparent: true,
        frame: false,
        alwaysOnTop: true,
        center: true,
        resizable: false,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
        }
    });
    splashWindow.loadFile(path.join(__dirname, 'splash.html'));
}

function createWindow() {
    // Ana uygulama penceresini oluÅŸtur.
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        minWidth: 940,
        minHeight: 560,
        show: false, // Pencereyi baÅŸlangÄ±Ã§ta gÃ¶sterme
        frame: false, // Ä°ÅŸletim sisteminin varsayÄ±lan Ã§erÃ§evesini kaldÄ±r
        titleBarStyle: 'hidden',
        backgroundColor: '#111214',
        webPreferences: {
            nodeIntegration: true, // `require` gibi Node.js Ã¶zelliklerini kullanabilmek iÃ§in
            contextIsolation: false, // `require`'Ä± doÄŸrudan renderer'da kullanmak iÃ§in (gÃ¼venlik notlarÄ±na dikkat)
            // preload: path.join(__dirname, 'preload.js') // GÃ¼venliÄŸi artÄ±rmak iÃ§in preload script'i kullanmak daha iyidir, ÅŸimdilik bu ÅŸekilde bÄ±rakÄ±yoruz.
        },
        icon: path.join(__dirname, 'icon.png') // Uygulama ikonu
    });

    // ve uygulamanÄ±n index.html'ini yÃ¼kle.
    mainWindow.loadFile(path.join(__dirname, 'index.html'));

    // Ana pencere iÃ§eriÄŸi tamamen yÃ¼klendiÄŸinde ve gÃ¶sterilmeye hazÄ±r olduÄŸunda
    mainWindow.once('ready-to-show', () => {
        if (splashWindow) {
            splashWindow.close();
        }
        mainWindow.show();
    });

    // Pencere kapatÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r.
    mainWindow.on('closed', () => {
        mainWindow = null;
    });
}

// Bu metod, Electron baÅŸlatÄ±ldÄ±ÄŸÄ±nda ve tarayÄ±cÄ± pencerelerini
// oluÅŸturmaya hazÄ±r olduÄŸunda Ã§aÄŸrÄ±lacak.
app.on('ready', () => {
    // ðŸ’¡ YENÄ°: Sunucuyu ayrÄ± bir iÅŸlem olarak baÅŸlat
    console.log('Starting server...');
    serverProcess = fork(path.join(__dirname, 'server.js'), [], { silent: false });

    createSplashWindow();

    // ðŸ’¡ YENÄ°: Sunucudan 'hazÄ±rÄ±m' mesajÄ±nÄ± bekle
    serverProcess.on('message', (message) => {
        if (message === 'server-ready') {
            createWindow(); // Sunucu hazÄ±r olduÄŸunda ana pencereyi oluÅŸtur
        }
    });
});

// TÃ¼m pencereler kapatÄ±ldÄ±ÄŸÄ±nda uygulamadan Ã§Ä±k.
app.on('window-all-closed', () => {
    // macOS'te kullanÄ±cÄ± Cmd + Q ile Ã§Ä±kana kadar uygulamalarÄ±n
    // ve menÃ¼ Ã§ubuÄŸunun aktif kalmasÄ± yaygÄ±ndÄ±r.
    if (process.platform !== 'darwin') {
        // ðŸ’¡ YENÄ°: Uygulama kapanÄ±rken sunucu iÅŸlemini de sonlandÄ±r
        if (serverProcess) {
            serverProcess.kill();
        }
        app.quit();
    }
});

app.on('activate', () => {
    // macOS'te dock'taki ikona tÄ±klandÄ±ÄŸÄ±nda ve baÅŸka pencere
    // aÃ§Ä±k olmadÄ±ÄŸÄ±nda yeni bir pencere oluÅŸturmak yaygÄ±ndÄ±r.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// --- IPC (Renderer Process ile Ä°letiÅŸim) ---

// Kapatma, kÃ¼Ã§Ã¼ltme ve bÃ¼yÃ¼tme butonlarÄ± iÃ§in olay dinleyicileri
ipcMain.on('minimize-app', () => {
    mainWindow.minimize();
});

ipcMain.on('maximize-app', () => {
    mainWindow.isMaximized() ? mainWindow.unmaximize() : mainWindow.maximize();
});

ipcMain.on('close-app', () => {
    mainWindow.close();
});
